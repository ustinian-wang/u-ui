{"version":3,"file":"components-VideoCall-videoCall-stories.09350985.iframe.bundle.js","mappings":";;;;;;;AAYA;;;;;AAOA;AAEA;;;;AAMA;;;AAKA;;;;;AAKA;;;;;;;;;;;;AAcA;;AAEA;AAeA;;;;AARA;;;;;;;;;;AC1BA;;AAMA;;;AASA;;;;AC1CA;AACA;;AAIA;;;;;AAOA;;;;;AAKA;AAOA;AAGA;AACA;;;AAGA;;;;;;AAOA;ACzCA;AACA;;;;;AAKA;;;AAIA;AAKA;;AAqBA;;;;;AAXA;AACA;AACA;;;;;;;;;;AC3BA;;;;AAMA;;;ACNA;AACA;AAEA;;AAEA;AAEA;AACA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAQA;AAHA;AACA;AACA;;;AC1CA;AACA;;AAEA;AACA;;;;;;;;;;;;AAcA;;;;;AAKA;;;;AAIA;AAGA;AACA;;AAEA;AACA","sources":["webpack://@ustinian-wang/u-ui/./src/components/VideoCall/style.js","webpack://@ustinian-wang/u-ui/./src/components/VideoCall/index.js","webpack://@ustinian-wang/u-ui/./src/components/Avatar/style.js","webpack://@ustinian-wang/u-ui/./src/components/Button/style.js","webpack://@ustinian-wang/u-ui/./src/components/Paragraph/style.js","webpack://@ustinian-wang/u-ui/./src/components/Text/style.js","webpack://@ustinian-wang/u-ui/./src/utils/mixins.js"],"sourcesContent":["import styled from \"styled-components\";\nimport Button from \"components/Button\";\nimport Avatar from \"components/Avatar\";\nimport { card } from \"utils/mixins\";\n\nconst Actions = styled.div`\n  grid-area: actions / title;\n  align-self: end;\n  justify-self: center;\n\n  display: grid;\n  grid-template-columns: 90px 90px 90px;\n`;\n\nconst Action = styled(Button).attrs({ size: \"64px\" })`\n  font-size: 32px;\n  color: white;\n\n  box-shadow: none;\n  background: ${({ theme, type }) =>\n    type === \"hangoff\" ? theme.red2 : theme.grayDark2};\n`;\n\nconst Self = styled(Avatar)`\n  grid-area: self;\n  align-self: end;\n  justify-self: end;\n`;\n\nconst Minimize = styled(Button)`\n  justify-self: end;\n  grid-area: title;\n  background-color: ${({ theme }) => theme.gray3};\n  padding: 0;\n  width: 62px;\n  height: 62px;\n  font-size: 46px;\n`;\n\nconst VideoCallAlert = styled.div`\n  display: grid;\n  grid-template-areas:\n    \"avatar info info\"\n    \"avatar action icon\";\n  row-gap: 5px;\n  column-gap: 10px;\n  align-items: center;\n  width: max-content;\n  position: absolute;\n  right: 0;\n  top: 10vh;\n  border: 1px solid ${({ theme }) => theme.gray4};\n  z-index: 200;\n  ${card}\n`;\n\nconst StyledVideoCall = styled.div`\n  height: 100%;\n  padding: 20px;\n  padding-bottom: 40px;\n  background-image: url(${({ src }) => src});\n  background-size: cover;\n  background-position: center;\n\n  display: grid;\n  grid-template-areas:\n    \"title title\"\n    \"actions self\";\n`;\n\nexport default StyledVideoCall;\nexport { Actions, Action, Self, Minimize, StyledVideoCall, VideoCallAlert };\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport StyledVideoCall, {\n  Minimize,\n  Actions,\n  Action,\n  Self,\n  VideoCallAlert,\n} from \"./style\";\nimport videoCaller from \"assets/images/video-caller.jpg\";\nimport face from \"assets/images/face-male-1.jpg\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faCompressAlt,\n  faMicrophone,\n  faPhoneSlash,\n  faVolumeMute,\n  faVideo,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport Avatar from \"components/Avatar\";\nimport Paragraph from \"components/Paragraph\";\n\nimport \"styled-components/macro\";\n\nfunction VideoCall({ children, onHangOffClicked, ...rest }) {\n  const [fullScreen, setFullScreen] = useState(true);\n\n  if (!fullScreen) {\n    return (\n      <VideoCallAlert>\n        <Avatar\n          src={face}\n          css={`\n            grid-area: avatar;\n          `}\n        />\n        <Paragraph\n          size=\"medium\"\n          css={`\n            grid-area: info;\n          `}\n        >\n          正在跟 李铭浩 进行视频通话\n        </Paragraph>\n        <Paragraph\n          type=\"secondary\"\n          css={`\n            grid-area: action;\n            cursor: pointer;\n          `}\n          onClick={() => setFullScreen(true)}\n        >\n          点击切换全屏\n        </Paragraph>\n        <FontAwesomeIcon\n          icon={faVideo}\n          css={`\n            grid-area: icon;\n            font-size: 20px;\n            justify-self: end;\n            opacity: 0.3;\n          `}\n        />\n      </VideoCallAlert>\n    );\n  }\n\n  return (\n    <StyledVideoCall src={videoCaller} {...rest}>\n      <Minimize shape=\"rect\" onClick={() => setFullScreen(false)}>\n        <FontAwesomeIcon icon={faCompressAlt} />\n      </Minimize>\n      <Actions>\n        <Action>\n          <FontAwesomeIcon icon={faMicrophone} />\n        </Action>\n        <Action type=\"hangoff\">\n          <FontAwesomeIcon icon={faPhoneSlash} onClick={onHangOffClicked} />\n        </Action>\n        <Action>\n          <FontAwesomeIcon icon={faVolumeMute} />\n        </Action>\n      </Actions>\n      <Self src={face} size=\"140px\" />\n    </StyledVideoCall>\n  );\n}\n\nVideoCall.propTypes = {\n  children: PropTypes.any,\n};\n\nexport default VideoCall;\n","import styled, {css} from \"styled-components\";\nimport { circle } from \"../../utils/mixins\";\n\nconst circleMixinFunc = (color, size=\"8px\") => css`\n    content: \"\";\n    display: block;\n    position: absolute;\n    ${circle(color, size)}\n`\n\nconst StyledAvatar = styled.div`\n    position: relative;\n`;\n\nconst StatusIcon = styled.div`\n    position: absolute;\n    left: 2px;\n    top: 4px;\n    &::before{\n        ${({size})=>circleMixinFunc(\"white\", size)}\n        transform: scale(2);\n    }\n    \n    &::after{\n        ${({theme, status, size})=>{\n            if(status===\"online\"){\n                return circleMixinFunc(theme.green, size)\n            }else if(status===\"offline\"){\n                return circleMixinFunc(theme.gray, size)\n            }\n        }\n    }\n`;\nconst AvatarClip = styled.div`\n    width: ${({size})=>size};\n    height: ${({size})=>size};\n    -webkit-border-radius: 50%;-moz-border-radius: 50%;border-radius: 50%;\n    overflow: hidden;\n`;\nconst AvatarImage = styled.img`\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n    \n    object-position: center;\n`;\n\nexport default StyledAvatar\nexport {StatusIcon, AvatarClip, AvatarImage}\n","import styled, { css } from \"styled-components\";\n\nconst shapeVariants = {\n  circle: css`\n    width: ${({ size }) => size};\n    height: ${({ size }) => size};\n    border-radius: 50%;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n  `,\n  rect: css`\n    padding: 12px 18px;\n    border-radius: 6px;\n  `,\n};\n\nconst typeVariants = {\n  primary: css`\n    background-color: ${({ theme }) => theme.primaryColor};\n    color: white;\n  `,\n};\n\nconst StyledButton = styled.button`\n  border: none;\n  outline: none;\n  cursor: pointer;\n  box-shadow: 0px 6px 12px rgba(0, 0, 0, 0.1);\n  ${({ shape }) => shapeVariants[shape]}\n  ${({ type }) => typeVariants[type]}\n  ${({ bgColor }) => `background-color: ${bgColor}`};\n\n  transform: scale(1);\n  transition: 0.4s;\n  &:hover {\n    transform: scale(1.1);\n    box-shadow: 0px 6px 16px rgba(0, 0, 0, 0.12);\n  }\n\n`;\n\nexport default StyledButton;\n","import styled, {css} from \"styled-components\";\nimport StyledText from \"../Text/style.js\";\n\nconst StyledParagraph=styled(StyledText)`\n    ${({ ellipsis })=>\n    ellipsis &&\n        css`\n            text-overflow: ellipsis;\n            white-space: nowrap;\n            overflow: hidden;\n        `\n    }\n        \n`\n\nexport default StyledParagraph\n","import styled, {css} from \"styled-components\";\n\nconst typeVariants = {\n    primary: css`\n        color: ${({theme})=>theme.grayDark};\n    `,\n    secondary: css`\n        color: ${({theme})=>theme.grayDark};\n        opacity: 0.3;\n    `,\n    danger: css`\n        color: ${({theme})=>theme.red};\n    `,\n\n}\n\nconst sizeVariants ={\n    normal: css`\n        ${({ theme })=> theme.normal}\n    `,\n    medium: css`\n        ${({ theme })=> theme.medium}\n    `,\n    large: css`\n        ${({ theme })=> theme.large}\n    `,\n    xlarge: css`\n        ${({ theme })=> theme.xlarge}\n    `,\n    xxlarge: css`\n        ${({ theme })=> theme.xxlarge}\n    `,\n    small: css`\n        ${({ theme })=> theme.small}\n    `,\n    xsmall: css`\n        ${({ theme })=> theme.xsmall}\n    `,\n    xxsmall:css`\n        ${({ theme })=> theme.xxsmall}\n    `\n}\n\nconst StyledText = styled.div`\n    font-size: ${({size})=> sizeVariants[size] || sizeVariants.normal};\n    ${({type})=>typeVariants[type] || typeVariants.normal}\n    ${({bold})=> bold && 'font-weight: 500'}\n`;\n\nexport default StyledText\n","import { css } from \"styled-components\";\n\nexport const circle = (color, size=\"8px\") => css`\n    position: absolute;\n    height: ${size};\n    width: ${size};\n    -webkit-border-radius: 50%;-moz-border-radius: 50%;border-radius: 50%;\n    background: ${color};\n`\n\nexport const activeBar = ({barWidth=\"8px\", shadowWidth=\"20px\"} = {})=> css`\n    position: relative;\n    &::before,\n    &::after{\n        display: block;\n        content: \"\";\n        position: absolute;\n        height: 100%;\n        left: 0\n    }\n    \n    &::before{\n        width: ${barWidth};\n        background: linear-gradient(180deg,rgba(142, 197, 242, 1) 0%, rgba(79, 157, 222, 1) 100%);\n    }\n    \n    &::after{\n        width: ${shadowWidth};\n        background: linear-gradient(270deg, rgba(41, 47, 76, 1) 0%, rgba(142, 197, 242, 1) 100%);\n        opacity: 0.6;\n    }\n`\n\nexport const card = (radius = \"6px\", padding = \"20px 30px\") => css`\n  padding: ${padding};\n  background: ${({ theme }) => theme.background};\n  box-shadow: 0px 18px 40px 0px rgba(0, 0, 0, 0.04);\n  border-radius: ${radius};\n`;\n"],"names":[],"sourceRoot":""}